<?php

namespace go\core\mail;

use DateTimeInterface;
use Exception;
use GO;
use GO\Base\Fs\File;
use go\core\fs\Blob;
use Swift_ByteStream_FileByteStream;
use Swift_Mime_SimpleMimeEntity;

/**
 * A mail message to send
 * 
 * The From header defaults to the system settings e-mail and title.
 * 
 * @example
 * ````
 * $message = go()->getMailer()->compose();
 * $message->setTo()->setFrom()->setBody()->send();
 * ```
 */
class Message extends \Swift_Message {

	/**
	 * @var Mailer
	 */
	private $mailer;

	public function __construct(Mailer $mailer) {
		$this->mailer = $mailer;
		parent::__construct();
		$this->setFrom(go()->getSettings()->systemEmail,go()->getSettings()->title);

		$headers = $this->getHeaders();
		$headers->addTextHeader("X-Mailer", "Group-Office");
	}

	private $to = [];
	private $bcc = [];

	public function setTo(...$addresses): Message
	{
		$this->to = $addresses;
		return $this;
	}

	public function getTo(): array
	{
		return $this->to;
	}

	public function addTo(...$addresses): Message
	{
		$this->to = array_merge($this->to, $addresses);
		return $this;
	}

	public function setBcc(...$addresses): Message
	{
		$this->bcc = $addresses;
		return $this;
	}

	public function getBcc(): array
	{
		return $this->bcc;
	}

	public function addBcc(...$addresses): Message
	{
		$this->bcc = array_merge($this->bcc, $addresses);
		return $this;
	}

	public function setCc($addresses, $name = null)
	{
		return parent::setCc($addresses, $name); // TODO: Change the autogenerated stub
	}

	public function getCc()
	{
		return parent::getCc(); // TODO: Change the autogenerated stub
	}

	public function addCc($address, $name = null)
	{
		return parent::addCc($address, $name); // TODO: Change the autogenerated stub
	}

	public function setFrom($addresses, $name = null)
	{
		return parent::setFrom($addresses, $name); // TODO: Change the autogenerated stub
	}

	public function getFrom()
	{
		return parent::getFrom(); // TODO: Change the autogenerated stub
	}

	public function setReplyTo($addresses, $name = null)
	{
		return parent::setReplyTo($addresses, $name); // TODO: Change the autogenerated stub
	}

	public function getReplyTo()
	{
		return parent::getReplyTo(); // TODO: Change the autogenerated stub
	}

	public function setDate(DateTimeInterface $dateTime)
	{
		return parent::setDate($dateTime); // TODO: Change the autogenerated stub
	}

	public function getDate()
	{
		return parent::getDate(); // TODO: Change the autogenerated stub
	}

	public function setPriority($priority)
	{
		return parent::setPriority($priority); // TODO: Change the autogenerated stub
	}

	public function getPriority()
	{
		return parent::getPriority(); // TODO: Change the autogenerated stub
	}

	public function setSender($address, $name = null)
	{
		return parent::setSender($address, $name); // TODO: Change the autogenerated stub
	}

	public function getSender()
	{
		return parent::getSender(); // TODO: Change the autogenerated stub
	}

	public function setHtmlBody($body)
	{
		return parent::setBody($body, "text/html"); // TODO: Change the autogenerated stub
	}

	public function getHtmlBody()
	{
		return parent::getBody(); // TODO: Change the autogenerated stub
	}

	public function setTextBody($body)
	{
		return parent::setBody($body, "text/html"); // TODO: Change the autogenerated stub
	}

	public function getTextBody()
	{
		return parent::getBody(); // TODO: Change the autogenerated stub
	}

	public function addPart($body, $contentType = null, $charset = null)
	{
		return parent::addPart($body, $contentType, $charset); // TODO: Change the autogenerated stub
	}


	/**
	 * Send this Message like it would be sent in a mail client.
	 *
	 * All recipients (with the exception of Bcc) will be able to see the other
	 * recipients this message was sent to.

	 * The return value is the number of recipients who were accepted for
	 * delivery.
	 *
	 * @param array $failedRecipients An array of failures by-reference
	 *
	 * @return int The number of successful recipients. Can be 0 which indicates failure
	 */
	public function send(&$failedRecipients = null): int
	{
		return $this->mailer->send($this, $failedRecipients);
	}

	public function setSubject($subject): Message
	{
		$this->getHeaders();
		return parent::setSubject($subject);
	}

	/**
	 * Provide Blob. Blob attachment will be returned.
	 *
	 * @param Blob $blob
	 * @param null $name
	 * @return static
	 */
	public function addBlob(Blob $blob, $name = null): Message
	{
		$this->attach(Attachment::fromBlob($blob)->setFilename($name ?? $blob->name));
		return $this;
	}

	public function attach(Swift_Mime_SimpleMimeEntity $entity)
	{
		return parent::attach($entity); // TODO: Change the autogenerated stub
	}

	public function embed(Swift_Mime_SimpleMimeEntity $entity)
	{
		return parent::embed($entity); // TODO: Change the autogenerated stub
	}

	/**
	 * @return Mailer
	 */
	public function getMailer(): Mailer
	{
		return $this->mailer;
	}


	public function toTmpFile($path = null): File
	{
		if(!isset($path)) {
			$path = 'email/' . date('mY') . '/sent_' . go()->getAuthState()->getUserId() . '-' . uniqid(time()) . '.eml';
		}

		$file = new File(GO::config()->file_storage_path . $path);
		$file->parent()->create();

		$fbs = new Swift_ByteStream_FileByteStream($file->path(), true);
		$this->toByteStream($fbs);

		if (!$file->exists()) {
			throw new Exception("Failed to save email to file!");
		}

		return $file;
	}

}

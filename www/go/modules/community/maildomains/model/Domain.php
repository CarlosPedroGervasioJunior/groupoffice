<?php

namespace go\modules\community\maildomains\model;

use go\core\acl\model\AclOwnerEntity;
use go\core\db\Criteria;
use go\core\jmap\Request;
use go\core\orm\Filters;
use go\core\orm\Mapping;
use go\core\orm\Query;
use go\core\orm\SearchableTrait;
use go\core\util\ArrayObject;
use go\core\util\DateTime;
use go\modules\community\maildomains\util\DnsCheck;

final class Domain extends AclOwnerEntity
{
	/** @var int */
	public $id;

	/** @var int */
	public $userId;

	/** @var string */
	public $domain;

	/** @var string */
	public $description;

	/** @var int >= 0 */
	public $maxAliases = 0;

	/** @var int */
	public $maxMailboxes = 0;

	/** @var int */
	public $totalQuota = 0;

	/** @var int */
	public $defaultQuota = 0;

	/** @var string */
	public $transport;

	/** @var bool */
	public $backupMx = false;

	/** @var int */
	public $createdBy;

	/** @var DateTime */
	public $createdAt;

	/** @var int */
	public $modifiedBy;

	/** @var DateTime */
	public $modifiedAt;

	/** @var boolean */
	public $active = true;

	public $aliases;

	public $mailboxes;

	public $spf;

	public $spfStatus;

	public $mx;

	public $mxStatus;

	public $dmarc;

	public $dmarcStatus;
	public $dkim;

	/** @var int */
	public $numAliases;

	/** @var int */
	public $numMailboxes;

	/** @var int Used quota in bytes */
	public $sumUsedQuota;

	/** @var int Disk usage in bytes */
	public $sumUsage;
	/**
	 * @var mixed|null
	 */
	public bool $checkDNS = false;

	/**
	 * @inheritDoc
	 */
	protected static function defineMapping(): Mapping
	{
		return parent::defineMapping()
			->addTable('community_maildomains_domain', 'cmd')
			->addQuery(
				(new Query())
					->select('SUM(COALESCE(`cmm`.`quota`,0)) as `sumUsedQuota`, SUM(COALESCE(`cmm`.`bytes`,0)) as `sumUsage`')
				->join('community_maildomains_mailbox', 'cmm', '`cmd`.`id`=`cmm`.`domainId`', 'LEFT')
//				->join('community_maildomains_quota', 'cmq', 'cmq.username = cmm.username', 'LEFT')
				->groupBy(['`cmm`.`domainId`']))
//			->addScalar('aliases', 'community_maildomains_alias', ['id' => 'domainId'])
//			->addScalar('mailboxes', 'community_maildomains_mailbox', ['id' => 'domainId'])
			->addMap('dkim', DkimKey::class, ['id' => 'domainId']);
	}

	/**
	 * Prevent conflict with the old Postfix Admin module
	 *
	 * @return string
	 */
	public static function getClientName(): string
	{
		return "MailDomain";
	}

	/**
	 * @inheritDoc
	 */
	protected static function defineFilters(): Filters
	{
		return parent::defineFilters()
			->add('id', function (Criteria $criteria, $value) {
				if (!empty($value)) {
					$criteria->where(['id' => $value]);
				}
			});
	}


	/**
	 * @inheritDoc
	 */
	protected static function textFilterColumns(): array
	{
		return ['id', 'description'];
	}

	/**
	 * @inheritDoc
	 */
	public function title(): string
	{
		return $this->id;
	}

	public function getSumUsedQuota(): int
	{
		return $this->sumUsedQuota;
	}

	public function getSumUsage(): int
	{
		return $this->sumUsage;
	}


	public function getNumAliases(): int
	{
		return count($this->aliases);

	}

	public function getNumMailboxes(): int
	{
		return count($this->mailboxes);
	}

	protected function internalSave(): bool
	{

		if($this->checkDNS) {
			$this->checkDns();
		}

		return parent::internalSave(); // TODO: Change the autogenerated stub
	}


	public function checkDns(): void
	{
		$ip = gethostbyname("smtp.group-office.com"); //Request::get()->getHost());
		$dnsChecker = new DnsCheck($this, $ip);
		$r = $dnsChecker->checkAll();
		$this->updateDns($r);
	}


	/**
	 * Upon manually checking DNS settings, update the domain record and DkimKey records as per DNS checks
	 *
	 * @param ArrayObject $record
	 * @throws \Exception
	 */
	public function updateDns(ArrayObject $record): void
	{
		$this->mxStatus = $record['mx'];
		$this->mx = implode(", ", $record['mxTargets']);
		$this->spf = $record['spf'];
		$this->spfStatus = $record['spfStatus'];
		$this->dmarc = $record['dmarc']['raw'] ?? null;
		$this->dmarcStatus = !empty($record['dmarc']);

		foreach($record['dkim'] as $selector => $dnsKey) {
			$storedKey = $this->dkim[$selector]->parsePublicKey();
			$this->dkim[$selector]->status = $dnsKey && ($storedKey == $dnsKey['p']);
		}
	}
}
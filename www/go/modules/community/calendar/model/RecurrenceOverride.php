<?php

namespace go\modules\community\calendar\model;

use go\core\data\Model;
use go\core\orm\Mapping;
use go\core\orm\Property;
use go\core\util\DateTime;

class RecurrenceOverride extends Property
{
	protected $fk; // to event
	protected $recurrenceId; // datetime of occurrence and key of map

	protected $patch; // json encoded PatchObject for the original event

	private $props; // decoded patch object


	public function init(){
		$this->props = json_decode(trim($this->patch,"'") ?? '{}');
	}

	protected static function defineMapping(): Mapping
	{
		return parent::defineMapping()->addTable('calendar_recurrence_override', "ro");
	}

	public function setValue(string $propName, $value): Model
	{
		//$this->initProps();
		$this->props->$propName = $value;
		$this->patch = json_encode($this->props);
		return $this;
	}

	public function __set($name, $value) {
		//$this->initProps();
		$this->props->$name = $value;
		$this->patch = json_encode($this->props);
	}

	public function __isset($name)
	{
		return isset($this->props->$name);
	}

	public function &__get($name) {
		//$this->initProps();
		return $this->props->$name;
	}

	public function toArray(array $properties = null): array|null
	{
		//$this->initProps();
		if(empty($this->props)) return null;
		return (array)$this->props;
	}

	protected function internalSave(): bool
	{
		if(!empty($this->recurrenceId) && is_string($this->recurrenceId)) {
			$this->recurrenceId = new DateTime(str_replace('T',' ',$this->recurrenceId));
		}

		return parent::internalSave(); // TODO: Change the autogenerated stub
	}

}
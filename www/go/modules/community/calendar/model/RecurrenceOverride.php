<?php

namespace go\modules\community\calendar\model;

use go\core\data\Model;
use go\core\orm\Mapping;
use go\core\orm\Property;
use go\core\util\DateTime;

class RecurrenceOverride extends Property
{
	protected $fk; // to event
	protected $recurrenceId; // datetime of occurrence and key of map

	protected $patch; // json encoded overridden properties

	private $props;

	protected function init()
	{
		$this->props = new \stdClass();
	}

	protected function initProps()
	{
		if(empty($this->props) && isset($this->patch) && is_string($this->patch)) {
			$this->props = json_decode($this->patch);
		}
	}

	protected static function defineMapping(): Mapping
	{
		return parent::defineMapping()->addTable('calendar_recurrence_override', "ro");
	}

	public function setValue(string $propName, $value): Model
	{
		$this->initProps();
		$this->props->$propName = $value;
		return $this;
	}

	public function __set($name, $val) {
		$this->initProps();
		$this->props->$name = $val;
	}
	public function &__get($name) {
		$this->initProps();
		return $this->props->$name;
	}

	public function toArray(array $properties = null): array
	{
		$this->initProps();
		return (array)$this->props;
	}

	protected function internalSave(): bool
	{
		if(!empty($this->recurrenceId) && is_string($this->recurrenceId)) {
			$this->recurrenceId = new DateTime(str_replace('T',' ',$this->recurrenceId));
		}
		$this->patch = json_encode($this->props);
		return parent::internalSave(); // TODO: Change the autogenerated stub
	}

}